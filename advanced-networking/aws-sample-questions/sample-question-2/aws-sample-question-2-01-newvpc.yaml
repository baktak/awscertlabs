---
AWSTemplateFormatVersion: 2010-09-09

Description: Architecture to experiment with AWS Advanced Networking Certification Sample Question 2

Metadata: 

  Author:
    Description: Tom Kringstad (tkringstad@baktak.com)
  License:
    Use as you wish. No warranty offered - this is just being used to experiment with AWS. 

  Question: 
    Description: 
      Your application server instances reside in the private subnet of your VPC. These instances need to
      access a Git repository on the Internet. You create a NAT gateway in the public subnet of your VPC. The
      NAT gateway can reach the Git repository, but instances in the private subnet cannot. You confirm that a
      default route in the private subnet route table points to the NAT gateway. The security group for your
      application server instances permits all traffic to the NAT gateway.
      What configuration change should you make to ensure that these instances can reach the patch server?

  Answers:
    Description: 
       A) Assign public IP addresses to the instances and route 0.0.0.0/0 to the Internet gateway.
       B) Configure an outbound rule on the application server instance security group for the Git repository.
       C) Configure inbound network access control lists (network ACLs) to allow traffic from the Git repository to
          the public subnet.
       D) Configure an inbound rule on the application server instance security group for the Git repository.


  AWS::CloudFormation::Interface:

    ParameterGroups:
    - Label: 
        default: Amazon VPC Parameters
      Parameters: 
      - VpcCidr
      - AvailabilityZones
      - PublicSubnet0Cidr
      - PrivateSubnet0Cidr
        
    ParameterLabels:
      VpcCidr: 
        default: VpcCidr
      AvailabilityZones:
        default: Availability Zones
      PublicSubnet0Cidr:
        default: Public Subnet 
      PrivateSubnet0Cidr:
        default: Private Subnet
  
Parameters: 

  VpcCidr: 
    Type: String
    Description: CIDR block for the VPC
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    Default: 10.0.0.0/16
    ConstraintDescription: CIDR block pattern must be in the form x.x.x.x/16-28

  AvailabilityZones:
    Description: 'List of Availability Zones to use for the subnets in the VPC'
    Type: List<AWS::EC2::AvailabilityZone::Name>

  PublicSubnet0Cidr:
    Type: String
    Description: CIDR block for the public subnet 
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    Default: 10.0.0.0/22
    ConstraintDescription: CIDR block pattern must be in the form x.x.x.x/16-28

  PrivateSubnet0Cidr:
    Type: String
    Description: CIDR block for the private subnet 
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    Default: 10.0.4.0/22
    ConstraintDescription: CIDR block pattern must be in the form x.x.x.x/16-28

  
Resources:

  PublicSubnet: 
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !Ref AvailabilityZones ]
      CidrBlock: !Ref PublicSubnet0Cidr
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name
          Value: !Join [ '', [ 'PublicSubnet0 / ', !Ref 'AWS::StackName' ] ]
        - Key: SubnetType
          Value: Public
      VpcId: !Ref Vpc

  PrivateSubnet: 
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !Ref AvailabilityZones ]
      CidrBlock: !Ref PrivateSubnet0Cidr
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: Name
          Value: !Join [ '', [ 'PrivateSubnet0 / ', !Ref 'AWS::StackName' ] ]
        - Key: SubnetType
          Value: Private
      VpcId: !Ref Vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'InternetGateway / ', !Ref 'AWS::StackName' ] ]
  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc

  PublicSubnetRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachInternetGateway
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'PublicRouteTable / ', !Ref 'AWS::StackName' ] ]

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref PublicSubnet

  NatGatewayEIP: 
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NatGateway: 
    Type: AWS::EC2::NatGateway
    DependsOn: AttachInternetGateway
    Properties: 
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet
  NatGatewayRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref NatGatewayRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
  NatGatewayRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'NatGatewayRouteTable / ', !Ref 'AWS::StackName' ] ]

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref NatGatewayRouteTable
      SubnetId: !Ref PrivateSubnet

  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'Vpc / ', !Ref 'AWS::StackName' ] ]


Outputs:
    
  Vpc: 
    Value: !Ref Vpc




